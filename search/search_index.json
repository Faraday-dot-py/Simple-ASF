{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Code Editor (Github Codespaces are nice, and are free for students)</li> <li>Npm (Pre-installed on all Github Codespaces)</li> <li>Firebase Account</li> <li>Vercel Account</li> </ul>"},{"location":"#firebase-setup","title":"Firebase Setup:","text":"<p>Follow these instructions set up your Firebase realtime database*</p> <p>IMPORTANT: Only do steps 1-2 and make sure to read the notes below!!!</p> <p>Notes</p> <ul> <li>Make sure that you keep Google Analytics enabled when prompted</li> <li>Use \"Default account for firebase\" when prompted for the Google Analytics account</li> <li>When shown the React Firebase Config code, copy the variable values and paste them into their corresponding places in the <code>.env</code> following the format below</li> <li>The <code>.env</code> file is located in the root directory of the project</li> <li>The <code>.env</code> file is hidden by default, so you may need to enable hidden files to see it</li> <li>You won't need any of the other code that is shown, just the variable values</li> </ul> <p></p> <pre><code>REACT_APP_API_KEY = [API_KEY]\nREACT_APP_AUTH_DOMAIN = [AUTH_DOMAIN]\nREACT_APP_PROJECT_ID = [PROJECT_ID]\nREACT_APP_STORAGE_BUCKET = [STORAGE_BUCKET]\nREACT_APP_MESSAGING_SENDER_ID = [MESSAGING_SENDER_ID]\nREACT_APP_APP_ID = [APP_ID]\nREACT_APP_MEASUREMENT_ID = [MEASUREMENT_ID]\n</code></pre> <p>In the end, your .env file should look something like this:</p> <pre><code>REACT_APP_API_KEY = 1234567890\nREACT_APP_AUTH_DOMAIN = 1234567890\nREACT_APP_PROJECT_ID = 1234567890\nREACT_APP_STORAGE_BUCKET = 1234567890\nREACT_APP_MESSAGING_SENDER_ID = 1234567890\nREACT_APP_APP_ID = 1234567890\nREACT_APP_MEASUREMENT_ID = 1234567890\n</code></pre> <p>Navigate to your Firebase console, click on the build dropdown, and click on <code>Realtime Database</code> Click on <code>Create Database</code>, click <code>Next</code>, select <code>Start in test mode</code>, and select \"Enable\" Save the URL of the page you're currently on, this is where you will be able to view your database Finally, go to the tab that says <code>Rules</code> and replace the code with the following: <pre><code>{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n</code></pre> Press <code>Publish</code> and you're done with the Firebase setup!</p>"},{"location":"#installing-dependencies","title":"Installing Dependencies","text":"<p>In your terminal, run <code>npm install</code> in the root directory of the project. </p>"},{"location":"#building-a-scouting-app","title":"Building a Scouting App","text":"<p>Included in this repository is the layout for a basic scouting app for the 2023 season as a demo.  </p> <p>You can get a copy of this repository by running <code>git clone https://github.com/Faraday-dot-py/Simple-ASF.git</code> in your terminal </p>"},{"location":"#seeing-your-app-for-the-first-time","title":"Seeing your app for the first time","text":"<p>This one is pretty simple.  In your terminal, run <code>npm start</code> in the root directory of the project. A new tab should open in your browser with the example app. You won't be using this, (unless you want to see what the example app looks like) so you can delete everything in <code>layout.json</code></p>"},{"location":"#all-the-widgets-you-need","title":"All the widgets you need","text":"<p>A widget is a component that renders a specific part of the app.  There are many widgets that you can use to build your app, all of which are located in the <code>src/widgets</code> directory. </p> <p>All widgets need a certain set of parameters, or props, to work.  Most are different depending on what widget you are rendering, but all widgets need a <code>type</code> prop to tell the compiler what you want to render.  All widgets also need a <code>title</code> prop, which is the title of the widget.  The <code>useTPS</code> parameter is a boolean that controls whether the app uses TPS (The Purple Standard) or not. More information on TPS is below in the <code>Additional Parameters</code> section. Finally, any input (and only an input) can have a <code>value</code> prop, which is the initial value of the input when the page first loads (DIFFERENT THAN THE <code>resetToValue</code>). </p>"},{"location":"#1-header","title":"1. Header","text":"<ul> <li>Widget Type: <code>header</code></li> <li>Widget Props:</li> <li><code>type*</code> (Required): The type of the widget, must be \"header\".</li> <li><code>value*</code> (Required): The text content of the header.</li> <li><code>decorator</code>: A decorator or style identifier for the header (optional).</li> </ul>"},{"location":"#2-label","title":"2. Label","text":"<ul> <li>Widget Type: <code>label</code></li> <li>Widget Props:</li> <li><code>type*</code> (Required): The type of the widget, must be \"label\".</li> <li><code>value*</code> (Required): The text content of the label.</li> <li><code>decorator</code>: A decorator or style identifier for the label (optional).</li> </ul>"},{"location":"#3-textbox","title":"3. Textbox","text":"<ul> <li>Widget Type: <code>textbox</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the textbox.</li> <li><code>type*</code> (Required): The type of the widget, must be \"textbox\".</li> <li><code>value</code>: The initial value of the textbox.</li> <li><code>required</code>: Indicates whether the field is required.</li> <li><code>resetToValue</code>: The value to reset the textbox to.</li> <li><code>decorator</code>: A decorator or style identifier for the textbox (optional).</li> </ul>"},{"location":"#4-checkbox","title":"4. Checkbox","text":"<ul> <li>Widget Type: <code>checkbox</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the checkbox.</li> <li><code>type*</code> (Required): The type of the widget, must be \"checkbox\".</li> <li><code>value</code>: The initial value of the checkbox.</li> </ul>"},{"location":"#5-counter","title":"5. Counter","text":"<ul> <li>Widget Type: <code>counter</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the counter.</li> <li><code>type*</code> (Required): The type of the widget, must be \"counter\".</li> <li><code>value</code>: The initial value of the counter.</li> <li><code>increment</code>: The value to increment or decrement by.</li> <li><code>resetToValue</code>: The value to reset the counter to.</li> <li><code>maxValue</code>: The maximum allowed value.</li> <li><code>minValue</code>: The minimum allowed value.</li> </ul>"},{"location":"#6-textbox-long","title":"6. Textbox Long","text":"<ul> <li>Widget Type: <code>textboxlong</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the long textbox.</li> <li><code>type*</code> (Required): The type of the widget, must be \"textboxlong\".</li> <li><code>value</code>: The initial value of the long textbox.</li> <li><code>resetToValue</code>: The value to reset the long textbox to.</li> </ul>"},{"location":"#7-dropdown","title":"7. Dropdown","text":"<ul> <li>Widget Type: <code>dropdown</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the dropdown.</li> <li><code>type*</code> (Required): The type of the widget, must be \"dropdown\".</li> <li><code>value</code>: The initial value of the dropdown.</li> <li><code>options*</code> (Required): An array of options for the dropdown.</li> <li><code>resetToValue</code>: The value to reset the dropdown to.</li> </ul>"},{"location":"#8-submit","title":"8. Submit","text":"<ul> <li>Widget Type: <code>submit</code></li> <li>Widget Props:</li> <li><code>title*</code> (Required): The title of the submit button.</li> <li><code>type*</code> (Required): The type of the widget, must be \"submit\".</li> </ul> <p>These widgets should be put into the <code>/src/layout.json</code> file as an array of dictionaries.  An example form for the 2023 season is included in the repository when it is first cloned.</p>"},{"location":"#additional-configuration","title":"Additional Configuration","text":"<p>In addition to the <code>/src/layout.json</code> file, there are two other files that you will need to edit to get your app working.  The first is the <code>/src/config.json</code> file. This file contains the configuration for the app, such as the title and the Firebase database URL. When editing this file, only edit the values of the variables specified below. The second is the <code>/src/.env</code> file. This file contains the configuration for the Firebase database, which you should have already set up. </p>"},{"location":"#sortmetrics","title":"<code>sortMetrics</code>","text":"<p>The <code>sortMetrics</code> parameter is an array of strings that determines how the database is sorted within the application. Each string in the array corresponds to the title of a valid input field, and the database will be sorted based on the specified metrics. In the provided example, <code>sortMetrics</code> is defined as <code>[\"Match Number\", \"Name\"]</code>, indicating that the database should be sorted first by \"Match Number\" and then by \"Name\".</p>"},{"location":"#renderrequiredstars","title":"<code>renderRequiredStars</code>","text":"<p>The <code>renderRequiredStars</code> parameter is a boolean that controls whether asterisks are appended to the end of any field that is marked as required. When set to <code>true</code>, the application will visually indicate required fields by adding an asterisk to their labels. In the example configuration, <code>renderRequiredStars</code> is set to <code>true</code>, enabling this feature.</p>"},{"location":"#usetps","title":"<code>useTPS</code>","text":"<p>TPS, or The Purple Standard, is a community-driven standard for scouting data developed by Harker Robotics (FRC Team 1072) and The Purple Warehouse. It is a set of guidelines for how to collect and store data, and it is used by many teams in the FIRST Robotics Competition.   More information can be found in TPS Press Release, on The Purple Warehouse Website, and on their Chief Delphi thread. TPS can be enabled by setting the <code>useTPS</code> parameter to <code>true</code> in the <code>config.json</code> file.  </p> <p>Notes</p> <p>When <code>useTPS</code> is enabled, the app will automatically sort the data in the database according to TPS guidelines. Otherwise, the app will sort the data according to the <code>sortMetrics</code> parameter. </p>"},{"location":"#usage-in-configuration-files","title":"Usage in Configuration Files","text":"<p>When editing the <code>/src/config.json</code> file, stay below the line, you only need to edit the parameters listed above.  You can also change the title of the app by going to the <code>package.json</code> file and changing the <code>name</code> parameter.  The final thing that you may want to edit is the <code>/src/App.css</code> file. This file contains the CSS for the app, and you can edit it to change the look of your app. There is already premade CSS, so I wouldn't mess with it unless you know what you are doing. </p>"},{"location":"#deploying-your-app","title":"Deploying your app","text":"<p>Once you have finished editing your app, you can deploy it to the web.  Vercel makes this super simple, all you have to do is: 1. Create a Vercel account Navigate to vercel.com and create an account. </p> <ol> <li> <p>Link your repo Once you have created an account, click the \"Add New\" &gt; \"Project\" button in the top right corner. </p> <ol> <li> <p>Follow the prompts to link the proper GitHub repository. </p> </li> <li> <p>Rename the project to whatever you want. </p> </li> <li> <p>Add environment variables Open the \"Environment Variables\" dropdown in the project settings.  Copy the entirety of your <code>.env</code> file into the <code>key</code> field, and it should auto-populate with all of your environment variables  If this doesn't work for some reason, you can manually add each environment variable.  Note: Make sure that all spelling and capitalization are correct, otherwise your app will not work. (Copy and paste what you can)</p> </li> </ol> </li> <li> <p>Deploy your app Click the \"Deploy\" button at the bottom</p> </li> </ol> <p>After waiting about a minute, your app should be deployed!  Navigate to the URL that Vercel gives you to see your app in action. </p> <p>Verify that it works by submitting a form and navigating to Your Firebase Dashboard, selecting your project, and opening the Realtime Database on the left panel   In there should be the data that you just submitted. </p> <p>The nice thing about Vercel, is that it will automatically update your website for you whenever you push to the main branch of your repository.  So if you want to change the way that your form looks, all you have to do is edit it and push it to Github. </p>"}]}